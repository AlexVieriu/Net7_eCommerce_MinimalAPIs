@page "/placeOrder"

@inject IPlaceOrderUseCase placeOrder
@inject NavigationManager navManager
@inject IMapper mapper

<h3 class="mb-5">PlaceOrderPage</h3>

<div class="row ms-4">
    <EditForm Model="Customer" OnValidSubmit="OnSubmitCustomer" class="card p-4 col-7 me-5">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="fw-bold">Customer Name</label>
            <InputText class="form-control" @bind-Value="Customer.CustomerName" />
        </div>

        <div class="mb-3">
            <label class="fw-bold">Customer Address</label>
            <InputText class="form-control" @bind-Value="Customer.CustomerAddress" />
        </div>

        <div class="mb-3">
            <label class="fw-bold">Customer StateProvince</label>
            <InputText class="form-control" @bind-Value="Customer.CustomerStateProvince" />
        </div>

        <div class="mb-3">
            <label class="fw-bold">Customer Country</label>
            <InputText class="form-control" @bind-Value="Customer.CustomerCountry" />
        </div>

        <div class="mb-5">
            <label class="fw-bold">Customer City</label>
            <InputText class="form-control" @bind-Value="Customer.CustomerCity" />
        </div>

        <button class="btn btn-primary" type="submit">Submit Customer</button>
    </EditForm>

    <div class="col">
        <OrderSummaryComp Order="Order" IsVisible="false" />
    </div>
</div>


@code {
    Order Order = new();
    CustomerUI Customer = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Order = await placeOrder.GetSummaryForOrderAsync();
            Customer.CustomerAddress = "Aleea lunca de dincolo";
            Customer.CustomerCity = "Albinutza";
            Customer.CustomerCountry = "Bucuresti";
            Customer.CustomerName = "Vieriu Alex";
            Customer.CustomerStateProvince = "No State";   
            
            StateHasChanged();
        }
    }

    private async Task OnSubmitCustomer()
    {
        mapper.Map(Customer,Order);

        var uniqueId = await placeOrder.ExecuteAsync(Endpoints.OrderUrl, Order);
        if (string.IsNullOrWhiteSpace(uniqueId) == false)
            navManager.NavigateTo($"/confirmOrder/{uniqueId}");
    }
}
